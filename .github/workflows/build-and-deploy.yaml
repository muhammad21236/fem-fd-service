name: build-and-deploy

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - run: make build-image

      - name: Push Docker images
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        run: |
          # Push both SHA-tagged image and latest
          make build-image-push
          make build-image-promote

      - name: Save image tag
        run: echo "${{ github.sha }}" > image-tag.txt

      - uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image-tag.txt

  # ... existing workflow ...

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: image-tag

      - name: Load image tag env
        run: echo "GIT_SHA=$(cat image-tag.txt)" >> $GITHUB_ENV

      - name: Pull Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        run: make build-image-pull

      - run: make up
      
      # Add database health check
      - name: Wait for database to be ready
        run: |
          docker run --network host --rm postgres:15-alpine \
            sh -c 'while ! pg_isready -h localhost -p 5432; do sleep 1; done; echo "Database ready"'
      
      - name: Run migrations
        env:
          GOOSE_DBSTRING: postgresql://postgres:password@localhost:5432/postgres?sslmode=disable
          GOOSE_DRIVER: postgres
        run: make build-image-migrate

      - if: always()
        run: make down